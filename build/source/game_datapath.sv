/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module game_datapath #(
        parameter SLOW_CLOCK_DIV = 5'h1a
    ) (
        input wire clk,
        input wire rst,
        input wire [3:0] rngmodule,
        input wire [3:0] rngmodule2,
        input wire p1_button_low,
        input wire p1_button_high,
        input wire p1_button_between,
        input wire p2_button_low,
        input wire p2_button_high,
        input wire p2_button_between,
        output reg [2:0] p1_score_out,
        output reg [2:0] p2_score_out,
        output reg [31:0] p1_button_out,
        output reg [31:0] p2_button_out,
        output reg [3:0] low_num_out,
        output reg [3:0] high_num_out,
        output reg [3:0] guess_num_out,
        output reg [3:0] display_out,
        output reg [31:0] timer_out,
        output reg slow_clock_out,
        output reg [7:0] debug_out,
        output reg [5:0] debug_alufn,
        output reg [3:0] debug_ra1,
        output reg [3:0] debug_ra2,
        output reg [3:0] debug_wa,
        output reg [3:0] debug_rng,
        output reg [31:0] debug_result
    );
    logic [31:0] input_alu_a;
    logic [31:0] input_alu_b;
    logic [31:0] M_game_alu_a;
    logic [31:0] M_game_alu_b;
    logic [5:0] M_game_alu_alufn;
    logic [31:0] M_game_alu_out;
    logic M_game_alu_z;
    logic M_game_alu_v;
    logic M_game_alu_n;
    
    alu game_alu (
        .a(M_game_alu_a),
        .b(M_game_alu_b),
        .alufn(M_game_alu_alufn),
        .out(M_game_alu_out),
        .z(M_game_alu_z),
        .v(M_game_alu_v),
        .n(M_game_alu_n)
    );
    
    
    localparam _MP_SIZE_1137814877 = 1'h1;
    localparam _MP_DIV_1137814877 = SLOW_CLOCK_DIV;
    localparam _MP_TOP_1137814877 = 1'h0;
    localparam _MP_UP_1137814877 = 1'h1;
    logic [0:0] M_game_timer_clock_value;
    
    counter #(
        .SIZE(_MP_SIZE_1137814877),
        .DIV(_MP_DIV_1137814877),
        .TOP(_MP_TOP_1137814877),
        .UP(_MP_UP_1137814877)
    ) game_timer_clock (
        .rst(rst),
        .clk(clk),
        .value(M_game_timer_clock_value)
    );
    
    
    localparam _MP_RISE_179867791 = 1'h1;
    localparam _MP_FALL_179867791 = 1'h0;
    logic M_edge_detector_game_timer_out;
    
    edge_detector #(
        .RISE(_MP_RISE_179867791),
        .FALL(_MP_FALL_179867791)
    ) edge_detector_game_timer (
        .in(M_game_timer_clock_value),
        .clk(clk),
        .out(M_edge_detector_game_timer_out)
    );
    
    
    logic [31:0] M_game_cu_regfile_rd2;
    logic [5:0] M_game_cu_alufn;
    logic [1:0] M_game_cu_asel;
    logic [1:0] M_game_cu_bsel;
    logic [1:0] M_game_cu_wdsel;
    logic [3:0] M_game_cu_regfile_wa;
    logic [3:0] M_game_cu_regfile_ra1;
    logic [3:0] M_game_cu_regfile_ra2;
    logic M_game_cu_regfile_we;
    logic [7:0] M_game_cu_state_debug_out;
    logic [1:0] M_game_cu_rngsel;
    
    game_cu game_cu (
        .p1_button_high(p1_button_high),
        .p1_button_low(p1_button_low),
        .p1_button_between(p1_button_between),
        .p2_button_high(p2_button_high),
        .p2_button_low(p2_button_low),
        .p2_button_between(p2_button_between),
        .rst(rst),
        .decrease_timer(M_edge_detector_game_timer_out),
        .clk(clk),
        .regfile_rd2(M_game_cu_regfile_rd2),
        .alufn(M_game_cu_alufn),
        .asel(M_game_cu_asel),
        .bsel(M_game_cu_bsel),
        .wdsel(M_game_cu_wdsel),
        .regfile_wa(M_game_cu_regfile_wa),
        .regfile_ra1(M_game_cu_regfile_ra1),
        .regfile_ra2(M_game_cu_regfile_ra2),
        .regfile_we(M_game_cu_regfile_we),
        .state_debug_out(M_game_cu_state_debug_out),
        .rngsel(M_game_cu_rngsel)
    );
    
    
    logic [31:0] M_game_regfiles_data;
    logic [31:0] M_game_regfiles_rd1;
    logic [31:0] M_game_regfiles_rd2;
    logic [31:0] M_game_regfiles_p1_score_out;
    logic [31:0] M_game_regfiles_p2_score_out;
    logic [31:0] M_game_regfiles_p1_button_out;
    logic [31:0] M_game_regfiles_p2_button_out;
    logic [31:0] M_game_regfiles_lower_bound_out;
    logic [31:0] M_game_regfiles_higher_bound_out;
    logic [31:0] M_game_regfiles_guess_num_out;
    logic [31:0] M_game_regfiles_display_out;
    logic [31:0] M_game_regfiles_timer_out;
    logic [3:0] M_game_regfiles_debug_ra1;
    logic [3:0] M_game_regfiles_debug_ra2;
    logic [3:0] M_game_regfiles_debug_wa;
    logic [31:0] M_game_regfiles_debug_result;
    
    game_regfiles game_regfiles (
        .we(M_game_cu_regfile_we),
        .wa(M_game_cu_regfile_wa),
        .ra1(M_game_cu_regfile_ra1),
        .ra2(M_game_cu_regfile_ra2),
        .rst(rst),
        .clk(clk),
        .data(M_game_regfiles_data),
        .rd1(M_game_regfiles_rd1),
        .rd2(M_game_regfiles_rd2),
        .p1_score_out(M_game_regfiles_p1_score_out),
        .p2_score_out(M_game_regfiles_p2_score_out),
        .p1_button_out(M_game_regfiles_p1_button_out),
        .p2_button_out(M_game_regfiles_p2_button_out),
        .lower_bound_out(M_game_regfiles_lower_bound_out),
        .higher_bound_out(M_game_regfiles_higher_bound_out),
        .guess_num_out(M_game_regfiles_guess_num_out),
        .display_out(M_game_regfiles_display_out),
        .timer_out(M_game_regfiles_timer_out),
        .debug_ra1(M_game_regfiles_debug_ra1),
        .debug_ra2(M_game_regfiles_debug_ra2),
        .debug_wa(M_game_regfiles_debug_wa),
        .debug_result(M_game_regfiles_debug_result)
    );
    
    
    always @* begin
        M_game_cu_regfile_rd2 = M_game_regfiles_rd2;
        debug_out = M_game_cu_state_debug_out;
        
        case (M_game_cu_asel)
            2'h0: begin
                input_alu_a = M_game_regfiles_rd1;
            end
            2'h1: begin
                input_alu_a = 1'h1;
            end
            2'h2: begin
                input_alu_a = 1'h0;
            end
            2'h3: begin
                input_alu_a = 2'h3;
            end
            default: begin
                input_alu_a = 1'h0;
            end
        endcase
        
        case (M_game_cu_bsel)
            2'h0: begin
                input_alu_b = M_game_regfiles_rd2;
            end
            2'h1: begin
                input_alu_b = 1'h1;
            end
            2'h2: begin
                input_alu_b = 1'h0;
            end
            2'h3: begin
                input_alu_b = 4'hf;
            end
            default: begin
                input_alu_b = 1'h0;
            end
        endcase
        M_game_alu_a = input_alu_a;
        M_game_alu_b = input_alu_b;
        M_game_alu_alufn = M_game_cu_alufn;
        
        case (M_game_cu_wdsel)
            2'h1: begin
                M_game_regfiles_data = 3'h4;
            end
            2'h2: begin
                M_game_regfiles_data = 2'h3;
            end
            2'h3: begin
                M_game_regfiles_data = 1'h0;
            end
            default: begin
                M_game_regfiles_data = M_game_alu_out;
            end
        endcase
        
        case (M_game_cu_rngsel)
            2'h1: begin
                M_game_regfiles_data = M_game_alu_out;
            end
            2'h2: begin
                M_game_regfiles_data = rngmodule;
            end
            2'h3: begin
                M_game_regfiles_data = rngmodule2;
            end
            default: begin
                M_game_regfiles_data = M_game_alu_out;
            end
        endcase
        timer_out = M_game_regfiles_timer_out;
        p1_score_out = M_game_regfiles_p1_score_out;
        p2_score_out = M_game_regfiles_p2_score_out;
        p1_button_out = M_game_regfiles_p1_button_out;
        p2_button_out = M_game_regfiles_p2_button_out;
        slow_clock_out = M_game_timer_clock_value;
        low_num_out = M_game_regfiles_lower_bound_out;
        high_num_out = M_game_regfiles_higher_bound_out;
        guess_num_out = M_game_regfiles_guess_num_out;
        display_out = M_game_regfiles_display_out;
        debug_result = M_game_regfiles_debug_result;
        debug_alufn = M_game_cu_alufn;
        debug_wa = M_game_regfiles_debug_wa;
        debug_ra1 = M_game_regfiles_debug_ra1;
        debug_ra2 = M_game_regfiles_debug_ra2;
        debug_rng = rngmodule;
    end
    
    
endmodule