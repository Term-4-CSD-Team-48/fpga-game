/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier #(
        parameter SIZE = 6'h20
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [(SIZE)-1:0] b,
        output reg [(SIZE)-1:0] mul
    );
    logic [31:0] R_06df1ef7_i;
    logic [31:0] RR_06df1ef7_i;
    logic [31:0] R_1a5a81d3_j;
    logic [31:0] RR_1a5a81d3_j;
    logic [31:0] R_5c311326_i;
    logic [31:0] RR_5c311326_i;
    logic [(SIZE)-1:0][(SIZE)-1:0] partials;
    localparam _MP_SIZE_1946325391 = SIZE;
    logic [(_MP_SIZE_1946325391)-1:0][(_MP_SIZE_1946325391)-1:0] M_rcas_a;
    logic [(_MP_SIZE_1946325391)-1:0][(_MP_SIZE_1946325391)-1:0] M_rcas_b;
    logic [(_MP_SIZE_1946325391)-1:0] M_rcas_cin;
    logic [(_MP_SIZE_1946325391)-1:0] M_rcas_cout;
    logic [(_MP_SIZE_1946325391)-1:0][(_MP_SIZE_1946325391)-1:0] M_rcas_s;
    
    genvar idx_0_1946325391;
    
    generate
        for (idx_0_1946325391 = 0; idx_0_1946325391 < _MP_SIZE_1946325391; idx_0_1946325391 = idx_0_1946325391 + 1) begin: forLoop_idx_0_1946325391
            rca #(
                .SIZE(_MP_SIZE_1946325391)
            ) rcas (
                .a(M_rcas_a[idx_0_1946325391]),
                .b(M_rcas_b[idx_0_1946325391]),
                .cin(M_rcas_cin[idx_0_1946325391]),
                .cout(M_rcas_cout[idx_0_1946325391]),
                .s(M_rcas_s[idx_0_1946325391])
            );
        end
    endgenerate
    
    
    always @* begin
        for (RR_06df1ef7_i = 0; RR_06df1ef7_i < SIZE; RR_06df1ef7_i = RR_06df1ef7_i + 1) begin
      R_06df1ef7_i = (1'h0) + RR_06df1ef7_i * (1'h1);
            partials[R_06df1ef7_i] = {SIZE{1'h0}};
            for (RR_1a5a81d3_j = 0; RR_1a5a81d3_j < SIZE - R_06df1ef7_i; RR_1a5a81d3_j = RR_1a5a81d3_j + 1) begin
        R_1a5a81d3_j = (1'h0) + RR_1a5a81d3_j * (1'h1);
                if (b[R_06df1ef7_i]) begin
                    partials[R_06df1ef7_i][R_1a5a81d3_j + R_06df1ef7_i] = a[R_1a5a81d3_j];
                end
            end
        end
        M_rcas_cin = 1'h0;
        M_rcas_a = partials;
        for (RR_5c311326_i = 0; RR_5c311326_i < SIZE - 1'h1; RR_5c311326_i = RR_5c311326_i + 1) begin
      R_5c311326_i = (1'h1) + RR_5c311326_i * (1'h1);
            M_rcas_b[R_5c311326_i] = M_rcas_s[R_5c311326_i - 1'h1];
        end
        M_rcas_b[1'h0] = 1'h0;
        mul = M_rcas_s[SIZE - 1'h1];
    end
    
    
endmodule