/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter #(
        parameter SIZE = 6'h20,
        parameter SHIFTERS = 3'h5
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [(SIZE)-1:0] shift
    );
    logic [31:0] R_5c3a450b_i;
    logic [31:0] RR_5c3a450b_i;
    logic [31:0] R_088a9d71_i;
    logic [31:0] RR_088a9d71_i;
    localparam _MP_SIZE_966377156 = SIZE;
    localparam logic [4:0][4:0] _MP_SHIFT_966377156 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [(SHIFTERS)-1:0][(_MP_SIZE_966377156)-1:0] M_left_shifters_a;
    logic [(SHIFTERS)-1:0] M_left_shifters_shift;
    logic [(SHIFTERS)-1:0] M_left_shifters_pad;
    logic [(SHIFTERS)-1:0][(_MP_SIZE_966377156)-1:0] M_left_shifters_out;
    
    genvar idx_0_966377156;
    
    generate
        for (idx_0_966377156 = 0; idx_0_966377156 < SHIFTERS; idx_0_966377156 = idx_0_966377156 + 1) begin: forLoop_idx_0_966377156
            x_bit_left_shifter #(
                .SIZE(_MP_SIZE_966377156),
                .SHIFT(_MP_SHIFT_966377156[idx_0_966377156])
            ) left_shifters (
                .a(M_left_shifters_a[idx_0_966377156]),
                .shift(M_left_shifters_shift[idx_0_966377156]),
                .pad(M_left_shifters_pad[idx_0_966377156]),
                .out(M_left_shifters_out[idx_0_966377156])
            );
        end
    endgenerate
    
    
    localparam _MP_SIZE_1471326858 = SIZE;
    localparam logic [4:0][4:0] _MP_SHIFT_1471326858 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [(SHIFTERS)-1:0][(_MP_SIZE_1471326858)-1:0] M_right_shifters_a;
    logic [(SHIFTERS)-1:0] M_right_shifters_shift;
    logic [(SHIFTERS)-1:0] M_right_shifters_pad;
    logic [(SHIFTERS)-1:0][(_MP_SIZE_1471326858)-1:0] M_right_shifters_out;
    
    genvar idx_0_1471326858;
    
    generate
        for (idx_0_1471326858 = 0; idx_0_1471326858 < SHIFTERS; idx_0_1471326858 = idx_0_1471326858 + 1) begin: forLoop_idx_0_1471326858
            x_bit_right_shifter #(
                .SIZE(_MP_SIZE_1471326858),
                .SHIFT(_MP_SHIFT_1471326858[idx_0_1471326858])
            ) right_shifters (
                .a(M_right_shifters_a[idx_0_1471326858]),
                .shift(M_right_shifters_shift[idx_0_1471326858]),
                .pad(M_right_shifters_pad[idx_0_1471326858]),
                .out(M_right_shifters_out[idx_0_1471326858])
            );
        end
    endgenerate
    
    
    always @* begin
        for (RR_5c3a450b_i = 0; RR_5c3a450b_i < SHIFTERS; RR_5c3a450b_i = RR_5c3a450b_i + 1) begin
      R_5c3a450b_i = (1'h0) + RR_5c3a450b_i * (1'h1);
            M_left_shifters_shift[R_5c3a450b_i] = b[R_5c3a450b_i];
            M_right_shifters_shift[R_5c3a450b_i] = b[R_5c3a450b_i];
        end
        M_left_shifters_a[1'h0] = a;
        M_right_shifters_a[1'h0] = a;
        for (RR_088a9d71_i = 0; RR_088a9d71_i < SHIFTERS - 1'h1; RR_088a9d71_i = RR_088a9d71_i + 1) begin
      R_088a9d71_i = (1'h1) + RR_088a9d71_i * (1'h1);
            M_left_shifters_a[R_088a9d71_i] = M_left_shifters_out[R_088a9d71_i - 1'h1];
            M_right_shifters_a[R_088a9d71_i] = M_right_shifters_out[R_088a9d71_i - 1'h1];
        end
        M_left_shifters_pad = 1'h0;
        M_right_shifters_pad = 1'h0;
        if (alufn[1'h0]) begin
            if (alufn[1'h1]) begin
                M_right_shifters_pad = {SHIFTERS{a[SIZE - 1'h1]}};
                shift = M_right_shifters_out[SHIFTERS - 1'h1];
            end else begin
                shift = M_right_shifters_out[SHIFTERS - 1'h1];
            end
        end else begin
            shift = M_left_shifters_out[SHIFTERS - 1'h1];
        end
    end
    
    
endmodule