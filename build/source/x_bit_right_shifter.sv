/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module x_bit_right_shifter #(
        parameter SIZE = 6'h20,
        parameter SHIFT = 5'h10
    ) (
        input wire [(SIZE)-1:0] a,
        input wire shift,
        input wire pad,
        output reg [(SIZE)-1:0] out
    );
    logic [31:0] R_268a6777_i;
    logic [31:0] RR_268a6777_i;
    logic [(SIZE)-1:0] M_mux_2_s0;
    logic [(SIZE)-1:0][1:0] M_mux_2_in;
    logic [(SIZE)-1:0] M_mux_2_out;
    
    genvar idx_0_2038204589;
    
    generate
        for (idx_0_2038204589 = 0; idx_0_2038204589 < SIZE; idx_0_2038204589 = idx_0_2038204589 + 1) begin: forLoop_idx_0_2038204589
            mux_2 mux_2 (
                .s0(M_mux_2_s0[idx_0_2038204589]),
                .in(M_mux_2_in[idx_0_2038204589]),
                .out(M_mux_2_out[idx_0_2038204589])
            );
        end
    endgenerate
    
    
    logic [(SIZE)-1:0] shifted_bits;
    always @* begin
        shifted_bits = {{SHIFT{pad}}, a[SIZE - 1'h1:SHIFT]};
        for (RR_268a6777_i = 0; RR_268a6777_i < SIZE; RR_268a6777_i = RR_268a6777_i + 1) begin
      R_268a6777_i = (1'h0) + RR_268a6777_i * (1'h1);
            M_mux_2_in[R_268a6777_i][1'h0] = a[R_268a6777_i];
            M_mux_2_in[R_268a6777_i][1'h1] = shifted_bits[R_268a6777_i];
        end
        M_mux_2_s0 = {SIZE{shift}};
        out = M_mux_2_out;
    end
    
    
endmodule