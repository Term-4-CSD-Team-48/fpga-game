/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [5:0][6:0] segment,
        input wire [5:0] io_button
    );
    logic rst;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam CLOCK_DIVIDER = 5'h1a;
    localparam SLOW_CLOCK_DIV = 5'h1a;
    logic segment_slow_clock;
    logic [5:0][3:0] M_sse_char;
    logic [5:0][6:0] M_sse_segs;
    
    genvar idx_0_687221115;
    
    generate
        for (idx_0_687221115 = 0; idx_0_687221115 < 6; idx_0_687221115 = idx_0_687221115 + 1) begin: forLoop_idx_0_687221115
            seven_segment_encoder sse (
                .L_char(M_sse_char[idx_0_687221115]),
                .segs(M_sse_segs[idx_0_687221115])
            );
        end
    endgenerate
    
    
    localparam _MP_STAGES_320821868 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_320821868)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam logic [5:0][26:0] _MP_CLK_FREQ_475657114 = {{27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100, 27'h5f5e100}};
    localparam _MP_MIN_DELAY_475657114 = 5'h14;
    localparam _MP_NUM_SYNC_475657114 = 2'h2;
    logic [5:0] M_io_button_cond_in;
    logic [5:0] M_io_button_cond_out;
    
    genvar idx_0_475657114;
    
    generate
        for (idx_0_475657114 = 0; idx_0_475657114 < 6; idx_0_475657114 = idx_0_475657114 + 1) begin: forLoop_idx_0_475657114
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_475657114[idx_0_475657114]),
                .MIN_DELAY(_MP_MIN_DELAY_475657114),
                .NUM_SYNC(_MP_NUM_SYNC_475657114)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_475657114]),
                .out(M_io_button_cond_out[idx_0_475657114])
            );
        end
    endgenerate
    
    
    localparam _MP_SIZE_1731530553 = 1'h1;
    localparam _MP_DIV_1731530553 = 5'h1a;
    localparam _MP_TOP_1731530553 = 1'h0;
    localparam _MP_UP_1731530553 = 1'h1;
    logic [0:0] M_game_timer_clock_value;
    
    counter #(
        .SIZE(_MP_SIZE_1731530553),
        .DIV(_MP_DIV_1731530553),
        .TOP(_MP_TOP_1731530553),
        .UP(_MP_UP_1731530553)
    ) game_timer_clock (
        .rst(rst),
        .clk(clk),
        .value(M_game_timer_clock_value)
    );
    
    
    localparam _MP_SIZE_207758038 = 1'h1;
    localparam _MP_DIV_207758038 = 5'h1a;
    localparam _MP_TOP_207758038 = 1'h0;
    localparam _MP_UP_207758038 = 1'h1;
    logic [0:0] M_slow_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_207758038),
        .DIV(_MP_DIV_207758038),
        .TOP(_MP_TOP_207758038),
        .UP(_MP_UP_207758038)
    ) slow_clk (
        .clk(clk),
        .rst(rst),
        .value(M_slow_clk_value)
    );
    
    
    logic [10:0] D_segment_counter_d, D_segment_counter_q = 0;
    logic [2:0] D_select_d, D_select_q = 0;
    localparam _MP_SLOW_CLOCK_DIV_465358465 = 5'h1a;
    logic [3:0] M_game_datapath_rngmodule;
    logic M_game_datapath_p1_button_low;
    logic M_game_datapath_p1_button_high;
    logic M_game_datapath_p1_button_between;
    logic M_game_datapath_p2_button_low;
    logic M_game_datapath_p2_button_high;
    logic M_game_datapath_p2_button_between;
    logic [2:0] M_game_datapath_p1_score_out;
    logic [2:0] M_game_datapath_p2_score_out;
    logic [31:0] M_game_datapath_p1_button_out;
    logic [31:0] M_game_datapath_p2_button_out;
    logic [3:0] M_game_datapath_low_num_out;
    logic [3:0] M_game_datapath_high_num_out;
    logic [3:0] M_game_datapath_guess_num_out;
    logic [3:0] M_game_datapath_display_out;
    logic [31:0] M_game_datapath_timer_out;
    logic M_game_datapath_slow_clock_out;
    logic [7:0] M_game_datapath_debug_out;
    logic [5:0] M_game_datapath_debug_alufn;
    logic [3:0] M_game_datapath_debug_ra1;
    logic [3:0] M_game_datapath_debug_ra2;
    logic [3:0] M_game_datapath_debug_wa;
    logic [3:0] M_game_datapath_debug_rng;
    logic [31:0] M_game_datapath_debug_result;
    
    game_datapath #(
        .SLOW_CLOCK_DIV(_MP_SLOW_CLOCK_DIV_465358465)
    ) game_datapath (
        .clk(clk),
        .rst(rst),
        .rngmodule(M_game_datapath_rngmodule),
        .p1_button_low(M_game_datapath_p1_button_low),
        .p1_button_high(M_game_datapath_p1_button_high),
        .p1_button_between(M_game_datapath_p1_button_between),
        .p2_button_low(M_game_datapath_p2_button_low),
        .p2_button_high(M_game_datapath_p2_button_high),
        .p2_button_between(M_game_datapath_p2_button_between),
        .p1_score_out(M_game_datapath_p1_score_out),
        .p2_score_out(M_game_datapath_p2_score_out),
        .p1_button_out(M_game_datapath_p1_button_out),
        .p2_button_out(M_game_datapath_p2_button_out),
        .low_num_out(M_game_datapath_low_num_out),
        .high_num_out(M_game_datapath_high_num_out),
        .guess_num_out(M_game_datapath_guess_num_out),
        .display_out(M_game_datapath_display_out),
        .timer_out(M_game_datapath_timer_out),
        .slow_clock_out(M_game_datapath_slow_clock_out),
        .debug_out(M_game_datapath_debug_out),
        .debug_alufn(M_game_datapath_debug_alufn),
        .debug_ra1(M_game_datapath_debug_ra1),
        .debug_ra2(M_game_datapath_debug_ra2),
        .debug_wa(M_game_datapath_debug_wa),
        .debug_rng(M_game_datapath_debug_rng),
        .debug_result(M_game_datapath_debug_result)
    );
    
    
    localparam logic [5:0][0:0] _MP_RISE_1470344809 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [5:0][0:0] _MP_FALL_1470344809 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [5:0] M_io_button_edge_in;
    logic [5:0] M_io_button_edge_out;
    
    genvar idx_0_1470344809;
    
    generate
        for (idx_0_1470344809 = 0; idx_0_1470344809 < 6; idx_0_1470344809 = idx_0_1470344809 + 1) begin: forLoop_idx_0_1470344809
            edge_detector #(
                .RISE(_MP_RISE_1470344809[idx_0_1470344809]),
                .FALL(_MP_FALL_1470344809[idx_0_1470344809])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_1470344809]),
                .out(M_io_button_edge_out[idx_0_1470344809])
            );
        end
    endgenerate
    
    
    localparam _MP_RISE_70242681 = 1'h1;
    localparam _MP_FALL_70242681 = 1'h0;
    logic M_edge_detector_game_timer_out;
    
    edge_detector #(
        .RISE(_MP_RISE_70242681),
        .FALL(_MP_FALL_70242681)
    ) edge_detector_game_timer (
        .in(M_game_timer_clock_value),
        .clk(clk),
        .out(M_edge_detector_game_timer_out)
    );
    
    
    localparam _MP_RISE_1947131537 = 1'h1;
    localparam _MP_FALL_1947131537 = 1'h0;
    logic M_segment_slow_clock_edge_in;
    logic M_segment_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1947131537),
        .FALL(_MP_FALL_1947131537)
    ) segment_slow_clock_edge (
        .clk(clk),
        .in(M_segment_slow_clock_edge_in),
        .out(M_segment_slow_clock_edge_out)
    );
    
    
    localparam _MP_SIZE_1195618842 = 3'h4;
    logic [3:0] M_generator_out;
    
    random_number_generator #(
        .SIZE(_MP_SIZE_1195618842)
    ) generator (
        .slow_clk(1'h0),
        .refresh(1'h1),
        .clk(clk),
        .out(M_generator_out)
    );
    
    
    always @* begin
        D_segment_counter_d = D_segment_counter_q;
        D_select_d = D_select_q;
        
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        if ((&io_button)) begin
            rst = 1'h1;
        end
        usb_tx = usb_rx;
        M_io_button_cond_in = io_button;
        M_io_button_edge_in = M_io_button_cond_out;
        M_game_datapath_p1_button_low = M_io_button_edge_out[1'h0];
        M_game_datapath_p1_button_between = M_io_button_edge_out[1'h1];
        M_game_datapath_p1_button_high = M_io_button_edge_out[2'h2];
        M_game_datapath_p2_button_low = M_io_button_edge_out[2'h3];
        M_game_datapath_p2_button_between = M_io_button_edge_out[3'h4];
        M_game_datapath_p2_button_high = M_io_button_edge_out[3'h5];
        M_game_datapath_rngmodule = M_generator_out;
        M_sse_char[1'h0] = M_game_datapath_low_num_out;
        M_sse_char[1'h1] = M_game_datapath_display_out;
        M_sse_char[2'h2] = M_game_datapath_high_num_out;
        M_sse_char[2'h3] = M_game_datapath_p1_score_out;
        M_sse_char[3'h5] = M_game_datapath_p2_score_out;
        M_sse_char[3'h4] = M_game_datapath_timer_out[2'h3:1'h0];
        D_segment_counter_d = D_segment_counter_q + 1'h1;
        segment_slow_clock = D_segment_counter_q[4'ha];
        M_segment_slow_clock_edge_in = segment_slow_clock;
        D_select_d = D_select_q;
        segment = {{7'h0, 7'h0, 7'h0, 7'h0, 7'h0, 7'h0}};
        segment[D_select_q] = M_sse_segs[D_select_q];
        if (M_segment_slow_clock_edge_out) begin
            if (D_select_q >= 3'h5) begin
                D_select_d = 1'h0;
            end else begin
                D_select_d = D_select_q + 1'h1;
            end
        end
        usb_tx = usb_rx;
        led = io_button;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_segment_counter_q <= 0;
            D_select_q <= 0;
        end else begin
            D_segment_counter_q <= D_segment_counter_d;
            D_select_q <= D_select_d;
        end
    end
endmodule