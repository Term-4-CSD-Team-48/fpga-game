/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier #(
        parameter SIZE = 6'h20
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [(SIZE)-1:0] b,
        output reg [(SIZE)-1:0] mul
    );
    logic [31:0] R_36051de5_i;
    logic [31:0] RR_36051de5_i;
    logic [31:0] R_7fb804bc_j;
    logic [31:0] RR_7fb804bc_j;
    logic [31:0] R_5f8266da_i;
    logic [31:0] RR_5f8266da_i;
    logic [(SIZE)-1:0][(SIZE)-1:0] partials;
    localparam _MP_SIZE_1541996435 = SIZE;
    logic [(_MP_SIZE_1541996435)-1:0][(_MP_SIZE_1541996435)-1:0] M_rcas_a;
    logic [(_MP_SIZE_1541996435)-1:0][(_MP_SIZE_1541996435)-1:0] M_rcas_b;
    logic [(_MP_SIZE_1541996435)-1:0] M_rcas_cin;
    logic [(_MP_SIZE_1541996435)-1:0][(_MP_SIZE_1541996435)-1:0] M_rcas_s;
    
    genvar idx_0_1541996435;
    
    generate
        for (idx_0_1541996435 = 0; idx_0_1541996435 < _MP_SIZE_1541996435; idx_0_1541996435 = idx_0_1541996435 + 1) begin: forLoop_idx_0_1541996435
            rca #(
                .SIZE(_MP_SIZE_1541996435)
            ) rcas (
                .a(M_rcas_a[idx_0_1541996435]),
                .b(M_rcas_b[idx_0_1541996435]),
                .cin(M_rcas_cin[idx_0_1541996435]),
                .s(M_rcas_s[idx_0_1541996435])
            );
        end
    endgenerate
    
    
    always @* begin
        for (RR_36051de5_i = 0; RR_36051de5_i < SIZE; RR_36051de5_i = RR_36051de5_i + 1) begin
      R_36051de5_i = (1'h0) + RR_36051de5_i * (1'h1);
            partials[R_36051de5_i] = {SIZE{1'h0}};
            for (RR_7fb804bc_j = 0; RR_7fb804bc_j < SIZE - R_36051de5_i; RR_7fb804bc_j = RR_7fb804bc_j + 1) begin
        R_7fb804bc_j = (1'h0) + RR_7fb804bc_j * (1'h1);
                if (b[R_36051de5_i]) begin
                    partials[R_36051de5_i][R_7fb804bc_j + R_36051de5_i] = a[R_7fb804bc_j];
                end
            end
        end
        M_rcas_cin = 1'h0;
        M_rcas_a = partials;
        for (RR_5f8266da_i = 0; RR_5f8266da_i < SIZE - 1'h1; RR_5f8266da_i = RR_5f8266da_i + 1) begin
      R_5f8266da_i = (1'h1) + RR_5f8266da_i * (1'h1);
            M_rcas_b[R_5f8266da_i] = M_rcas_s[R_5f8266da_i - 1'h1];
        end
        M_rcas_b[1'h0] = 1'h0;
        mul = M_rcas_s[SIZE - 1'h1];
    end
    
    
endmodule