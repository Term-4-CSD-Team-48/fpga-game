module alu #(
    SIZE = 32 : SIZE > 1
)(
    input a[32],
    input b[32],
    input alufn[6],
    output out[32]
    //output z,
    //output v,
    //output n
) { 
    adder adder(#SIZE(SIZE))
    compare compare
    boolean boolean(#SIZE(SIZE))
    shifter shifter(#SIZE(SIZE))
    multiplier multiplier(#SIZE(SIZE))
    
    always {
        adder.a = a
        adder.b = b
        adder.alufn_signal = alufn
        
        compare.z = adder.z
        compare.v = adder.v
        compare.n = adder.n
        compare.alufn = alufn
        
        boolean.a = a
        boolean.b = b
        boolean.alufn = alufn
        
        shifter.a = a
        shifter.b = b[4:0]
        shifter.alufn = alufn
        
        multiplier.a = a
        multiplier.b = b 
        
        // Original was a mux that processed the alufn to configure out
        // but we need to optimize it due to failing to meet timing errors
        case(alufn){
            6h00: // ADD
                out = adder.out
            6h01: // SUB
                out = adder.out  
            6h02: // MUL
                out = multiplier.mul
            6h18: // BITWISE AND
                out = boolean.bool
            6h1E: // BITWISE OR 
                out = boolean.bool 
            6h16: // BITWISE XOR
                out = boolean.bool 
            6h1A: // "A"
                out = a
            6h20: // SHL 
                out = shifter.shift
            6h21: // SHR 
                out = shifter.shift
            6h23: // SRA 
                out = shifter.shift
            6h33: // CMPEQ 
                out = compare.cmp
            6h35: // CMPLT 
                out = compare.cmp
            6h37: // CMPLE
                out = compare.cmp
            // Additional functionality in previous checkoff not used in prototype unfortunately
            // Our additional functionality in previous checkoff 
            // was a rng module that just uses a counter and clk
            // to capture the current value of the counter but we saw prof's one was nicer lol.
            //6h3F:
                //out = a/b
            default:
                out = 0
        } 
   
        //z = adder.z
        //v = adder.v
        //n = adder.n  
    }
}