module game_cu (
    input clk,  // clock
    input rst,  // reset
    input regfile_rd2[32], //direct reading of regfile data from rd2
    
    input p1_button_high,
    input p1_button_low,
    input p1_button_between,
    input p2_button_high,
    input p2_button_low,
    input p2_button_between,
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output wdsel[2],
    output regfile_wa[4],
    output regfile_ra1[4],
    output regfile_ra2[4],
    output regfile_we,
    output debug[4],
    output rngsel[2]
) {
    enum GameStates{
        RESET_P1SCORE,
        RESET_P2SCORE,
        RESET_TIMER,
        RESET_LOW,
        RESET_HIGH,
        RESET_GUESS,
        START_TIMER,
        GENERATE_FIRST,
        GENERATE_SECOND,
        COMPARE_NUMBERS,
        BRANCH_COMPARE_NUMBERS,
        STORE_LOW_FIRST,
        STORE_HIGH_SECOND,
        STORE_HIGH_FIRST,
        STORE_LOW_SECOND,
        GENERATE_GUESS,
        CHECK_GUESS_LOW,
        BRANCH_GUESS_LOW,
        STORE_LOW_GUESS,
        CHECK_HIGH_GUESS,
        BRANCH_GUESS_HIGH,
        STORE_HIGH_GUESS,
        STORE_IN_BETWEEN,
        IDLE,
        SET_P1_BUTTON_LOW,
        SET_P1_BUTTON_HIGH,
        SET_P1_BUTTON_IN_BETWEEN,
        SET_P2_BUTTON_LOW,
        SET_P2_BUTTON_HIGH,
        SET_P2_BUTTON_IN_BETWEEN,
        DECREASE_GAME_TIMER,
        CHECK_TIMER,
        BRANCH_CHECK_TIMER,
        CHECK_P1_BUTTON_PRESS,
        BRANCH_P1_BUTTON_PRESS,
        INCREASE_P1_SCORE,
        CHECK_P2_BUTTON_PRESS,
        BRANCH_P2_BUTTON_PRESS,
        INCREASE_P2_SCORE,
        COMPARE_SCORES,
        BRANCH_COMPARE_SCORES,
        CHECK_P1_SCORE,
        BRANCH_CHECK_P1_SCORE,
        CHECK_P2_SCORE,
        BRANCH_CHECK_P2_SCORE,
        CHECK_DRAW,
        BRANCH_DRAW,
        DRAW,
        CHECK_WINNER,
        BRANCH_WINNER,
        P1_WINS,
        P2_LOSE,
        P2_WINS,
        P1_LOSE,
        GAMEOVER
    }

    dff game_fsm[$width(GameStates)](#INIT(GameStates.RESET_P1SCORE), .clk(clk), .rst(rst))
    
    always {
        
        // standard setting unless otherwise overwritten by each case 
        alufn = 0
        asel = 0 
        bsel = 0
        regfile_we = 0
        regfile_wa = d8 
        regfile_ra1 = d0
        regfile_ra2 = d0
        rngsel = 0
        
        debug = b0000
                
        game_fsm.d = game_fsm.q
        if (rst){
            game_fsm.d = GameStates.RESET_P1SCORE
        }
        else{
            
            case(game_fsm.q){
                
                GameStates.RESET_P1SCORE: 
                    alufn = b000000    //ADD 
                    asel = b10        // Bit 0
                    bsel = b10        // Bit 0
                    regfile_we = b1
                    regfile_wa = d0    // P1 Score Reg
                    wdsel = b00
                    
                GameStates.RESET_P2SCORE: 
                    alufn = b000000    //ADD 
                    asel = b10        // Bit 0
                    bsel = b10        // Bit 0
                    regfile_we = b1
                    regfile_wa = d1    // P2 Score Reg
                    wdsel = b00
                
                GameStates.RESET_TIMER: 
                    alufn = b000000    //ADD 
                    asel = b10        // Bit 0
                    bsel = b10        // Bit 0
                    regfile_we = b1
                    regfile_wa = d7    // Timer Reg
                    wdsel = b00
                
                GameStates.RESET_LOW: 
                    alufn = b000000    //ADD 
                    asel = b10        // Bit 0
                    bsel = b10        // Bit 0
                    regfile_we = b1
                    regfile_wa = d4    // Low Bound Reg
                    wdsel = b00
                
                GameStates.RESET_HIGH: 
                    alufn = b000000    //ADD 
                    asel = b10        // Bit 0
                    bsel = b10        // Bit 0
                    regfile_we = b1
                    regfile_wa = d5    // High Bound Reg
                    wdsel = b00
                
                GameStates.RESET_GUESS: 
                    alufn = b000000    //ADD 
                    asel = b10        // Bit 0
                    bsel = b10        // Bit 0
                    regfile_we = b1
                    regfile_wa = d6    // Guess Number Reg
                    wdsel = b00
                
                GameStates.START_TIMER: 
                    alufn = b000000    //ADD 
                    asel = b11        // Bit 5
                    bsel = b00        
                    regfile_ra2 = d7    // Timer Reg
                    regfile_we = b1
                    regfile_wa = d7    // Store to Timer Reg
                    wdsel = b00
                
                GameStates.GENERATE_FIRST: 
                    regfile_we = b1
                    regfile_wa = d8    // Store to Temp Reg 1
                    rngsel = b1
            }
        }
    }
}