module game_datapath#(
    SLOW_CLOCK_DIV ~ 26 : SLOW_CLOCK_DIV > 0
)(
    input clk,  // clock
    input rst,  // reset
    
    //input debugbutton1,
    //input debugbutton2,
    input rngmodule[4],
    input rngmodule2[4],
    input p1_button_low,
    input p1_button_high,
    input p1_button_between,
    input p2_button_low,
    input p2_button_high,
    input p2_button_between,
    
    // 7 Segment outputs
    output p1_score_out[3],
    output p2_score_out[3],
    output p1_button_out[32],
    output p2_button_out[32],
    output low_num_out[4],
    output high_num_out[4],
    output guess_num_out[4],
    output display_out[4],
    output timer_out[32],
    output slow_clock_out,
    output debug_out[8],
    output debug_alufn[6],
    output debug_ra1[4],
    output debug_ra2[4],
    output debug_wa[4],
    output debug_rng[4],
    output debug_result[32]
) {
    
    //temp variables
    sig input_alu_a[32]
    sig input_alu_b[32]
    
    alu game_alu
    
    .clk(clk){
        counter game_timer_clock(#SIZE(1),#DIV(SLOW_CLOCK_DIV), .rst(rst)) 
        edge_detector edge_detector_game_timer(#RISE(1), #FALL(0), .in(game_timer_clock.value))
        
        game_cu game_cu(
            .p1_button_high(p1_button_high),
            .p1_button_low(p1_button_low),
            .p1_button_between(p1_button_between),
            .p2_button_high(p2_button_high),
            .p2_button_low(p2_button_low),
            .p2_button_between(p2_button_between),
            .rst(rst),
            .decrease_timer(edge_detector_game_timer.out)
        )
        
        game_regfiles game_regfiles(
            .we(game_cu.regfile_we), 
            .wa(game_cu.regfile_wa), 
            .ra1(game_cu.regfile_ra1), 
            .ra2(game_cu.regfile_ra2),
            .rst(rst)
        )
    }
    
    always {
        // Bootstrap rd2 output to CU for convenient branching conditions
        game_cu.regfile_rd2 = game_regfiles.rd2
        debug_out = game_cu.state_debug_out
        
        // Debugging Signals
        //game_cu.fsm_clk = debugbutton1
        //game_cu.fsm_clk2 = debugbutton2
        
        // asel mux
        case(game_cu.asel){
            b00  : input_alu_a = game_regfiles.rd1
            b01  : input_alu_a = 1 
            b10  : input_alu_a = 0
            b11  : input_alu_a = 3    // Change this value to set the timer and max score
            default :
                input_alu_a = 0
        }
        
        // bsel mux
        case(game_cu.bsel){
            b00 : input_alu_b = game_regfiles.rd2
            b01 : input_alu_b = 1
            b10 : input_alu_b = 0
            b11 : input_alu_b = 15
            default: //necessary to init
                input_alu_b = 0           
        }
        
        // alu
        game_alu.a = input_alu_a
        game_alu.b = input_alu_b
        game_alu.alufn = game_cu.alufn
        
        // wdsel mux
        case (game_cu.wdsel){
            b01 : game_regfiles.data = d4
            b10 : game_regfiles.data = d3
            b11 : game_regfiles.data = d0
            default : 
                game_regfiles.data = game_alu.out
        }
        
        // rngsel mux
        case (game_cu.rngsel){
            b01 : game_regfiles.data = game_alu.out
            b10 : game_regfiles.data = rngmodule
            b11 : game_regfiles.data = rngmodule2
            default :
                game_regfiles.data = game_alu.out
        }
        
        timer_out = game_regfiles.timer_out
        p1_score_out = game_regfiles.p1_score_out
        p2_score_out = game_regfiles.p2_score_out
        p1_button_out = game_regfiles.p1_button_out
        p2_button_out = game_regfiles.p2_button_out
        slow_clock_out = game_timer_clock.value
        low_num_out = game_regfiles.lower_bound_out
        high_num_out = game_regfiles.higher_bound_out
        guess_num_out = game_regfiles.guess_num_out
        display_out = game_regfiles.display_out
        
        // Debugging State Signals
        debug_result = game_regfiles.debug_result
        
        // Debug Signals
        debug_alufn = game_cu.alufn
        debug_wa = game_regfiles.debug_wa
        debug_ra1 = game_regfiles.debug_ra1
        debug_ra2 = game_regfiles.debug_ra2
        debug_rng = rngmodule
    }
}